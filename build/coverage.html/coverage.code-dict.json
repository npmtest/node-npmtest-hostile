{"/home/travis/build/npmtest/node-npmtest-hostile/test.js":"/* istanbul instrument in package npmtest_hostile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hostile/lib.npmtest_hostile.js":"/* istanbul instrument in package npmtest_hostile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hostile = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hostile = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hostile/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hostile && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hostile */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hostile\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hostile.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hostile.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hostile.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hostile.__dirname + '/lib.npmtest_hostile.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hostile/node_modules/hostile/index.js":"var fs = require('fs')\nvar once = require('once')\nvar split = require('split')\nvar through = require('through')\nvar net = require('net')\n\nvar WINDOWS = process.platform === 'win32'\nvar EOL = WINDOWS\n  ? '\\r\\n'\n  : '\\n'\n\nexports.HOSTS = WINDOWS\n  ? 'C:/Windows/System32/drivers/etc/hosts'\n  : '/etc/hosts'\n\n  /**\n   * Get a list of the lines that make up the filePath. If the\n   * `preserveFormatting` parameter is true, then include comments, blank lines\n   * and other non-host entries in the result.\n   *\n   * @param  {boolean}   preserveFormatting\n   * @param  {function(err, lines)=} cb\n   */\n\nexports.getFile = function (filePath, preserveFormatting, cb) {\n  var lines = []\n  if (typeof cb !== 'function') {\n    fs.readFileSync(filePath, { encoding: 'utf8' }).split(/\\r?\\n/).forEach(online)\n    return lines\n  }\n\n  cb = once(cb)\n  fs.createReadStream(filePath, { encoding: 'utf8' })\n    .pipe(split())\n    .pipe(through(online))\n    .on('close', function () {\n      cb(null, lines)\n    })\n    .on('error', cb)\n\n  function online (line) {\n    // Remove all comment text from the line\n    var lineSansComments = line.replace(/#.*/, '')\n    var matches = /^\\s*?(.+?)\\s+(.+?)\\s*$/.exec(lineSansComments)\n    if (matches && matches.length === 3) {\n      // Found a hosts entry\n      var ip = matches[1]\n      var host = matches[2]\n      lines.push([ip, host])\n    } else {\n      // Found a comment, blank line, or something else\n      if (preserveFormatting) {\n        lines.push(line)\n      }\n    }\n  }\n}\n\n/**\n * Wrapper of `getFile` for getting a list of lines in the Host file\n *\n * @param  {boolean}   preserveFormatting\n * @param  {function(err, lines)=} cb\n */\nexports.get = function (preserveFormatting, cb) {\n  return exports.getFile(exports.HOSTS, preserveFormatting, cb)\n}\n\n/**\n * Add a rule to /etc/hosts. If the rule already exists, then this does nothing.\n *\n * @param  {string}   ip\n * @param  {string}   host\n * @param  {function(Error)=} cb\n */\nexports.set = function (ip, host, cb) {\n  var didUpdate = false\n  if (typeof cb !== 'function') {\n    return _set(exports.get(true))\n  }\n\n  exports.get(true, function (err, lines) {\n    if (err) return cb(err)\n    _set(lines)\n  })\n\n  function _set (lines) {\n    // Try to update entry, if host already exists in file\n    lines = lines.map(mapFunc)\n\n    // If entry did not exist, let's add it\n    if (!didUpdate) {\n      // If the last line is empty, or just whitespace, then insert the new entry\n      // right before it\n      var lastLine = lines[lines.length - 1]\n      if (typeof lastLine === 'string' && /\\s*/.test(lastLine)) {\n        lines.splice(lines.length - 1, 0, [ip, host])\n      } else {\n        lines.push([ip, host])\n      }\n    }\n\n    exports.writeFile(lines, cb)\n  }\n\n  function mapFunc (line) {\n    // replace a line if both hostname and ip version of the address matches\n    if (Array.isArray(line) && line[1] === host && net.isIP(line[0]) === net.isIP(ip)) {\n      line[0] = ip\n      didUpdate = true\n    }\n    return line\n  }\n}\n\n/**\n * Remove a rule from /etc/hosts. If the rule does not exist, then this does\n * nothing.\n *\n * @param  {string}   ip\n * @param  {string}   host\n * @param  {function(Error)=} cb\n */\nexports.remove = function (ip, host, cb) {\n  if (typeof cb !== 'function') {\n    return _remove(exports.get(true))\n  }\n\n  exports.get(true, function (err, lines) {\n    if (err) return cb(err)\n    _remove(lines)\n  })\n\n  function _remove (lines) {\n    // Try to remove entry, if it exists\n    lines = lines.filter(filterFunc)\n    return exports.writeFile(lines, cb)\n  }\n\n  function filterFunc (line) {\n    return !(Array.isArray(line) && line[0] === ip && line[1] === host)\n  }\n}\n\n/**\n * Write out an array of lines to the host file. Assumes that they're in the\n * format that `get` returns.\n *\n * @param  {Array.<string|Array.<string>>} lines\n * @param  {function(Error)=} cb\n */\nexports.writeFile = function (lines, cb) {\n  lines = lines.map(function (line, lineNum) {\n    if (Array.isArray(line)) {\n      line = line[0] + ' ' + line[1]\n    }\n    return line + (lineNum === lines.length - 1 ? '' : EOL)\n  })\n\n  if (typeof cb !== 'function') {\n    var stat = fs.statSync(exports.HOSTS)\n    fs.writeFileSync(exports.HOSTS, lines.join(''), { mode: stat.mode })\n    return true\n  }\n\n  cb = once(cb)\n  fs.stat(exports.HOSTS, function (err, stat) {\n    if (err) {\n      return cb(err)\n    }\n    var s = fs.createWriteStream(exports.HOSTS, { mode: stat.mode })\n    s.on('close', cb)\n    s.on('error', cb)\n\n    lines.forEach(function (data) {\n      s.write(data)\n    })\n    s.end()\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-hostile/node_modules/hostile/bin/cmd.js":"#!/usr/bin/env node\n\nvar chalk = require('chalk')\nvar hostile = require('../')\nvar minimist = require('minimist')\nvar net = require('net')\n\nvar argv = minimist(process.argv.slice(2))\n\nvar command = argv._[0]\n\nif (command === 'list' || command === 'ls') list()\nif (command === 'set') set(argv._[1], argv._[2])\nif (command === 'remove') remove(argv._[1])\nif (command === 'load') load(argv._[1])\nif (command === 'unload') unload(argv._[1])\nif (!command) help()\n\n/**\n * Print help message\n */\nfunction help () {\n  console.log(function () { /*\n  Usage: hostile [command]\n\n    Commands:\n\n      list                   List all current domain records in hosts file\n      set [ip] [host]        Set a domain in the hosts file\n      remove [domain]        Remove a domain from the hosts file\n      load [file]            Load a set of host entries from a file\n      unload [file]          Remove a set of host entries from a file\n\n  */ }.toString().split(/\\n/).slice(1, -1).join('\\n'))\n}\n\n/**\n * Display all current ip records\n */\nfunction list () {\n  var lines\n  try {\n    lines = hostile.get(false)\n  } catch (err) {\n    return error(err)\n  }\n  lines.forEach(function (item) {\n    if (item.length > 1) {\n      console.log(item[0], chalk.green(item[1]))\n    } else {\n      console.log(item)\n    }\n  })\n}\n\n/**\n * Set a new host\n * @param {string} ip\n * @param {string} host\n */\nfunction set (ip, host) {\n  if (!ip || !host) {\n    return error('Invalid syntax: hostile set <ip> <host>')\n  }\n\n  if (ip === 'local' || ip === 'localhost') {\n    ip = '127.0.0.1'\n  } else if (!net.isIP(ip)) {\n    return error('Invalid IP address')\n  }\n\n  try {\n    hostile.set(ip, host)\n  } catch (err) {\n    return error('Error: ' + err.message + '. Are you running as root?')\n  }\n  console.log(chalk.green('Added ' + host))\n}\n\n/**\n * Remove a host\n * @param {string} host\n */\nfunction remove (host) {\n  var lines\n  try {\n    lines = hostile.get(false)\n  } catch (err) {\n    return error(err)\n  }\n  lines.forEach(function (item) {\n    if (item[1] === host) {\n      try {\n        hostile.remove(item[0], host)\n      } catch (err) {\n        return error('Error: ' + err.message + '. Are you running as root?')\n      }\n      console.log(chalk.green('Removed ' + host))\n    }\n  })\n}\n\n/**\n * Load hosts given a file\n * @param {string} filePath\n */\nfunction load (filePath) {\n  var lines = parseFile(filePath)\n\n  lines.forEach(function (item) {\n    set(item[0], item[1])\n  })\n  console.log(chalk.green('\\nAdded %d hosts!'), lines.length)\n}\n\n/**\n * Remove hosts given a file\n * @param {string} filePath\n */\nfunction unload (filePath) {\n  var lines = parseFile(filePath)\n\n  lines.forEach(function (item) {\n    remove(item[1])\n  })\n  console.log(chalk.green('Removed %d hosts!'), lines.length)\n}\n\n/**\n * Get all the lines of the file as array of arrays [[IP, host]]\n * @param {string} filePath\n */\nfunction parseFile (filePath) {\n  var lines\n  try {\n    lines = hostile.getFile(filePath, false)\n  } catch (err) {\n    return error(err)\n  }\n  return lines\n}\n\n/**\n * Print an error and exit the program\n * @param {string} message\n */\nfunction error (err) {\n  console.error(chalk.red(err.message || err))\n  process.exit(-1)\n}\n"}